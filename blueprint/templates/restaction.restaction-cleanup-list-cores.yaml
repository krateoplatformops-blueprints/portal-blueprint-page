apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: {{ .Release.Name }}-restaction-cleanup-list-cores
  namespace: {{ .Release.Namespace }}
spec:
  api:
  # Delete all cores in namespace that contain
  # annotations:
  #   meta.helm.sh/release-name = {{ .Release.Name }}
  #   meta.helm.sh/release-namespace = {{ .Release.Namespace }}
  - name: coresCrds
    path: "/apis/apiextensions.k8s.io/v1/customresourcedefinitions"
    filter: "[.items[] | select(.spec.group == \"core.krateo.io\") | {storedVersion: .status.storedVersions[0], plural: .status.acceptedNames.plural} ]"
    continueOnError: true
  - name: getCores
    path: ${"/apis/core.krateo.io/" + (.storedVersion)+ "/namespaces/{{ .Release.Namespace }}/" + (.plural)}
    dependsOn: 
      name: coresCrds
      iterator: .coresCrds
    filter: >
      [
        .items[] 
        | select(
            .metadata.annotations["meta.helm.sh/release-name"]? == "{{ .Release.Name }}"
            and 
            .metadata.annotations["meta.helm.sh/release-namespace"]? == "{{ .Release.Namespace }}"
        )
        | { apiVersion: .apiVersion, name: .metadata.name, namespace: .metadata.namespace, kind: .kind }
      ] 
  - name: getCoresPlural
    dependsOn: 
      name: getCores
      iterator: .getCores
    path: ${"/api-info/names?apiVersion=" + (.apiVersion) + "&kind=" + (.kind)}
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace: {{ .Values.krateoNamespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: getCoresPlural
    exportJwt: true 
  filter: >
    [
      .getCores[]
      as $w
      | (
          (.getCoresPlural | if type == "object" then [.] else . end)
          | map(select(.singular | ascii_downcase == ($w.kind | ascii_downcase)))
          | .[0] // {}
        )
      | $w + { plural: .plural }
    ]